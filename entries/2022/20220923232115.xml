<?xml version="1.0" encoding="UTF-8"?>
<article title="素のJavaScriptでリアクティブなUIを作る" published="2022-09-23T23:22:51+09:00" updated="2022-09-24T00:33:14+09:00" category="JavaScript">
	<h1>素のJavaScriptでリアクティブなUIを作る</h1><p>フレームワークを使わず、素のJavaScriptでリアクティブなUIを作ってみました。<br/>
データをProxyに置換して、それをUI要素とバインドして、データの変更があるたびに再描画する方法です。<br/>
		<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
	
	
	<pre>&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8" /&gt;
&lt;style&gt;
div {
    font-size: 10pt;
}
div.S {
    width: 100px;
}
div.M {
    width: 200px;
}
div.L {
    width: 300px;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script&gt;

const data = [
    {id:1, name:"A", color:"#ff0000", size:"S"},
    {id:2, name:"B", color:"#00ff00", size:"M"},
    {id:3, name:"C", color:"#0000ff", size:"L"},
];

const handler = {
    set(target, prop, value, receiver) {
        const oldValue = target[prop];
        if(Reflect.set(...arguments)) {
            notify(target, prop, value, oldValue);
            return true;
        } else {
            return false;
        }
    }
};

function notify(target, prop, newValue, oldValue) {
    if(prop === "color") {
        items.filter(e =&gt; e.data.id === target.id).forEach(e =&gt; e.render());
    } else if(prop === "size") {
        items.filter(e =&gt; e.data.id === target.id).forEach(e =&gt; e.render());
    }
}

class Foo {
    constructor(item) {
        this.data = item;
        this.view = document.createElement("DIV");
        this.view.innerHTML = `
            &lt;p&gt;${this.data.name}&lt;/p&gt;
            Color:
            &lt;input type="color" value="${this.data.color}"select class="color" /&gt;
            Size:
            &lt;select class="size"&gt;
                &lt;option value="S"&gt;S&lt;/option&gt;
                &lt;option value="M"&gt;M&lt;/option&gt;
                &lt;option value="L"&gt;L&lt;/option&gt;
            &lt;/select&gt;
        `;
        this.view.querySelector("input.color").onchange = event =&gt; {
            this.data.color = event.currentTarget.value;
        };
        this.view.querySelector("select.size").onchange = event =&gt; {
            this.data.size = event.currentTarget.value;
        };
        this.render();
    }
    render() {
        this.view.className = this.data.size;
        this.view.style.backgroundColor = this.data.color;
        this.view.querySelector("input.color").value = this.data.color;
        this.view.querySelector("select.size").value = this.data.size;
    }
}

const items = data.map(e =&gt; new Proxy(e, handler)).map(e =&gt; new Foo(e));
items.forEach(e =&gt; document.body.appendChild(e.view));

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
</article>
