<?xml version="1.0" encoding="UTF-8"?>
<article title="かんたんにわかる暗号化とハッシュ" published="2019-01-29T23:28:55+09:00" updated="2019-01-30T09:47:21+09:00" category="暗号化">
	<h1>かんたんにわかる暗号化とハッシュ</h1>

	<p>専門家ではありませんが、くわしくない人でも簡単に理解できて、より安全なIT環境が普及することを願って、自分の知っている範囲で、あえて簡略化して書いてありますのでご容赦ください。</p>


	<figure>
		<img src="images/mental_health_woman.png" />
		<figcaption></figcaption>
	</figure>

	<h2>ハッシュ</h2>
	<p>ハッシュ（hash）は、データを決まった長さの英数字の羅列に置き換える操作です。<br/>
羅列の長さはハッシュの種類によって異なります。</p>
	<p>同じデータは必ず同じ羅列になり、わずかでも違うデータはまったく違う羅列になります。<br/>
ハッシュは暗号化ではありませんが、この性質を利用して、データが同じかどうか・改変されていないかどうかを判定するためなど、暗号化と合わせてさまざまに利用されています。</p>

	<figure>
		<img src="images/sha1.png" />
		<figcaption>ハッシュの例（SHA1）</figcaption>
	</figure>
	<figure>
		<img src="images/sha512.png" />
		<figcaption>ハッシュの例（SHA512）</figcaption>
	</figure>

	<p>ハッシュは片方向にしか作れないので、ハッシュから元のデータに戻すことはできません。<br/>
以上の性質を利用して、パスワードをハッシュに変えて保存しておくことで、<strong>パスワードそのものを保存することなく、入力されたパスワードが正しいかを確認することができます。</strong></p>

	<p>まず、ユーザー登録のときに、パスワードをあらかじめ決めた方式でハッシュにして、データベースに保存します。<br/>
パスワードの原文は保存せずに必ず破棄します。これにより、パスワードが漏れる心配がなくなります。</p>

	<p>そして、ログインするときには、入力されたパスワードを登録時と同じ方式でハッシュにしてみて、データベースに保存されているハッシュと比較します。同じであればログインに成功します。</p>
<aside>ハッシュにする操作やハッシュを比較する操作はサーバーでおこないます。</aside>

	<p>なお、同じパスワードからは必ず同じハッシュができてしまいます。<br/>
つまり、よくあるパスワードからハッシュをたくさん作っておくと、ハッシュの元になったパスワードを推測することができてしまうのです。<br/>
そこで、パスワード用のハッシュを作るときは、「ソルト」（塩）というランダムなデータをパスワードに付け加えておきます。<br/>
これにより、同じパスワードからでも、まったく違うハッシュを作ることができ、元のパスワードを推測することができなくなります。</p>
<aside>ソルトはハッシュとセットでデータベースに保存しておきます。</aside>

	<figure>
		<img src="images/sha512-salt.png" />
		<figcaption>ソルトを付けたハッシュの例（SHA512）<br />
同じパスワードなのにまったく違うハッシュが作られます。</figcaption>
	</figure>

	<p>ハッシュの種類には、SHA1、SHA256、SHA512などがあります。<br/>
SHA1は40文字で、ファイルが同一かどうか比較したりするのに便利に使われています。SHA1は安全性が低くなったためパスワード用には使いません。<br/>
パスワード用には、SHA512（128文字）や、SHA256（64文字）の使用が推奨されます。</p>
<aside>上記の「文字数」は、16進表記にした場合の長さです。</aside>

	<p>ちなみに、ハッシュのように他の番号とかぶらないユニークな番号として「GUID」（UUID）というものがあります。<br/>
ハッシュのように「元になるデータ」がないけれどユニークな番号を作りたい場合は、GUIDを使うと便利です。</p>

	<p>【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、ハッシュやパスワード、GUIDに関するどのような機能があるか調べてみましょう。<br/>
2. ハッシュには、上記以外の種類もあります。どのようなものがあり、利用状況を調べてみましょう。<br/>
3. 普段使っているサービスやアプリケーションで、ハッシュがどのように使われているか調べてみましょう。<br/>
4. <strong>お客様が「パスワードを忘れたので教えてほしい」と問い合わせてくることがあります。どのように対応したらよいか考えてみましょう。</strong></p>




	<h2>暗号化（対称）</h2>
	<p>対称暗号化は、いわゆる「パスワード」による暗号化です。<br/>
暗号化するときと、復号するときに、同じ1つだけのキー（共通の鍵）を使うのでこのように呼びます。</p>

	<p>秘密のデータをやりとりするする場合には、パスワードを相手にも教えなければいけないため、そのパスワードを相手に伝える際に漏れてしまう危険があります。<br/>
なお、対称暗号化は、大きなデータも暗号化できるのがメリットです。</p>

	<p>【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、対称暗号化に関するどのような機能があるか調べてみましょう。<br/>
2. 普段使っているサービスやアプリケーションで、対称暗号化がどのように使われているか調べてみましょう。<br/>
3. パスワードをどうやったら相手に安全に伝えることができるか考えてみましょう。</p>




	<h2>暗号化（非対称）</h2>
	<p>非対称暗号化は、2つのキー（キーペア）を使います。<br/>
キーペアは、公開用のキーと、秘密のキーでセットになっています。キーペアは作るごとに毎回違うものが作られます。<br/>
公開用のキーは誰に渡しても見られても大丈夫ですが、秘密のキーは誰にも見せてはいけません。</p>

	<p>
Aさんが作ったキーペアは、次のように使います。<br/>
・秘密のキーでデータに署名（Aが発行しましたという証明）して相手に渡す。<br/>
・受け取ったBさんは、Aさんからもらっている公開用のキーで署名を検証（偽物でないことの確認）する。<br/>
・Bさんは、Aさんからもらっている公開用のキーでデータを暗号化してAさんに渡す。<br/>
・Aさんは、Bさんにもらったデータを秘密のキーで復号する。<br/>
つまり、秘密のキーは署名と復号、公開用のキーは暗号化と検証ができるようになっています。</p>
<aside>逆の使い方をしたい場合には、Bさんが作ったキーペアが必要です。</aside>

	<p>秘密のキーは、パスワードで暗号化し、決められた方法で大切に保管しておく必要があります。<br/>
非対称暗号化は、HTTPSや、SSHなどでも使用されています。</p>

	<p>なお、非対称暗号化は、計算が複雑なため、限られた大きさのデータしか暗号化できないのがデメリットです。<br/>
そのため、自動生成したパスワードでデータを対称暗号化し、そのパスワードを秘密のキーで非対称暗号化してデータに添える方法などがとられることがあります（ハイブリッド方式）。</p>

	<p>【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、非対称暗号化に関するどのような機能があるか調べてみましょう。また。キーペアを実際に作ってみましょう。<br/>
2. 普段使っているコンピュータで、秘密のキーをどこに保管すればよいのか調べてみましょう。<br/>
3. キーを失くしたり分からなくなってしまった場合、どうしたらよいか考えてみましょう。</p>


	<figure>
		<img src="images/mental_yandere_woman.png" />
		<figcaption></figcaption>
	</figure>

</article>




