<?xml version="1.0" encoding="UTF-8"?>
<article title="かんたんにわかる暗号化" published="2019-01-29T23:28:55+09:00" updated="2019-01-30T01:30:36+09:00" category="暗号化">
	<h1>かんたんにわかる暗号化</h1>
	<p>この記事は、くわしくない人でも簡単に理解できるようにあえて簡略化して書いてあります。</p><h2>ハッシュ</h2>
	<p>ハッシュ（hash）は、データを決まった長さの英数字の羅列に置き換える操作です。<br/>
羅列の長さはハッシュの種類によって異なります。<br/>
		<br/>
同じデータは必ず同じ羅列になり、わずかでも違うデータはまったく違う羅列になります。<br/>
この性質を利用して、データが同じかどうか・改変されていないかどうかを判定するためにも使われます。<br/>
		<br/>
また、ハッシュは片方向にしか作れないので、ハッシュから元のデータに戻すことはできません。<br/>
この性質を利用して、パスワードをハッシュで保存しておくことが一般的です。<br/>
		<br/>
まず、ユーザー登録の際に、パスワードをあらかじめ決めた方法でハッシュにしてデータベースに保存します。<br/>
パスワードの原文は保存せずに必ず破棄します。これにより、パスワードが漏れる心配がなくなります。<br/>
		<br/>
ログインの際には、入力されたパスワードを登録時と同じ方法でハッシュにして、データベースに保存されているハッシュと比較します。同じであればログインに成功します。<br/>
※ハッシュにする操作やハッシュを比較する操作はサーバーでおこないます。<br/>
		<br/>
なお、上記の「同じデータは必ず同じ羅列になる」性質から、同じパスワードからは同じハッシュができてしまいます。<br/>
つまり、よくあるパスワードからハッシュを作り、ハッシュの元になったパスワードを推測することができてしまいます。<br/>
そこで、パスワード用のハッシュを作るときは、「ソルト」（塩）というランダムなデータをパスワードに付け加えておきます。<br/>
これにより、同じパスワードからでもまったく違うハッシュを作ることができ、元のパスワードを推測することができなくなります。<br/>
※ソルトはハッシュとセットでデータベースに保存しておきます。<br/>
		<br/>
ハッシュの種類には、SHA1、SHA256、SHA512などがあります。<br/>
SHA1は40文字で、ファイルが同一かどうか比較したりするのに便利に使われています。SHA1は、安全性が低くなったためパスワード用には使いません。<br/>
パスワード用には、SHA512（128文字）や、SHA256（64文字）の使用が推奨されます。<br/>
		<br/>
		<br/>
【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、ハッシュやパスワードに関するどのような機能があるか調べてみましょう。<br/>
2. ハッシュには、上記以外の種類もあります。どのようなものがあり、使用状況を調べてみましょう。<br/>
3. 普段使っているサービスやアプリケーションで、ハッシュがどのように使われているか調べてみましょう。<br/>
4. お客様が「パスワードを忘れたので教えてほしい」と問い合わせてくることがあります。どのように対応したらよいか考えてみましょう。</p><h2>暗号化（対称）</h2><p>対称暗号化は、いわゆる「パスワード」による暗号化です。<br/>
暗号化するときと、復号するときに、同じ1つだけのキー（共通の鍵）を使うのでこのように呼びます。<br/>
		<br/>
秘密のデータをやりとりするする場合には、パスワードを相手にも教えなければいけないため、そのパスワードを相手に伝える際に漏れてしまう危険があります。<br/>
なお、対称暗号化は、大きなデータも暗号化できるのがメリットです。<br/>
		<br/>
		<br/>
【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、対称暗号化に関するどのような機能があるか調べてみましょう。<br/>
2. 普段使っているサービスやアプリケーションで、対称暗号化がどのように使われているか調べてみましょう。<br/>
3. パスワードをどうやったら相手に安全に伝えることができるか考えてみましょう。</p><h2>暗号化（非対称）</h2>
	<p>非対称暗号化は、2つのキー（キーペア）を使います。<br/>
キーペアは、公開用のキーと、秘密のキーでセットになっています。キーペアは作るごとに毎回違うものが作られます。<br/>
		<br/>
公開用のキーは誰に渡しても見られても大丈夫ですが、秘密のキーは誰にも見せてはいけません。<br/>
		<br/>
Aさんが作ったキーペアは、以下のように使います。<br/>
・秘密のキーでデータに署名（Aが発行しましたという証明）して相手に渡す。<br/>
・受け取ったBさんは、Aさんからもらっている公開用のキーで署名を検証（偽物でないことの確認）する。<br/>
・Bさんは、Aさんからもらっている公開用のキーでデータを暗号化してAさんに渡す。<br/>
・Aさんは、Bさんにもらったデータを秘密のキーで復号する。<br/>
つまり、秘密のキーは署名と復号、公開用のキーは暗号化と検証ができるようになっています。<br/>
※逆の使い方をしたい場合には、Bさんが作ったキーペアが必要です。<br/>
		<br/>
秘密のキーは、パスワードで暗号化し、決められた方法で大切に保管しておく必要があります。<br/>
非対称暗号化は、HTTPSや、SSHなどで使用されています。<br/>
		<br/>
なお、非対称暗号は、大きなデータを暗号化できないのがデメリットです。<br/>
そのため、自動生成したパスワードでデータを対称暗号化し、そのパスワードを秘密のキーで非対称暗号化してデータに添える方法などがとられます（ハイブリッド方式）。<br/>
		<br/>
		<br/>
【課題】<br/>
1. 普段使っているプログラミング言語やフレームワークで、非対称暗号化に関するどのような機能があるか調べてみましょう。また。キーペアを実際に作ってみましょう。<br/>
2. 普段使っているコンピュータで、秘密のキーをどこに保管すればよいのか調べてみましょう。<br/>
3. キーを失くしたり分からなくなってしまった場合、どうしたらよいか考えてみましょう。</p></article>
