<?xml version="1.0" encoding="UTF-8"?>
<article title="かんたんにわかるタイムゾーンとオフセット" published="2019-02-10T21:54:43+09:00" updated="2019-02-10T21:54:43+09:00" category="">
	<h1>かんたんにわかるタイムゾーンとオフセット</h1>
	<p>プログラムで時刻を表すとき、各国の時差が含まれるとなにがなんだか分からなくなってくるときがあります。<br/>
ここで時刻のデータについてここで整理しておきましょう。</p>
	<p>たとえば電話やTwitterで海外の友人と会話しているとき、東京の夜9時とロンドンのお昼は「同じ時間」を共有しています。<br/>
時計の表示は違っていても、世界には1つだけの「同じ時間」しか流れていないのです。<br/>
これは、東京とロンドンが、東京と火星のどこかになっても同じです。</p>
	<p>プログラムでは、このような「世界で1つだけの時間」を、とりあえずどこかを起点にした数値で記録します。<br/>
たとえば JavaScript では、イギリスでの 1970/01/01 を 0 として、1/1000秒単位でカウントした数値としています。</p>
	<aside>プログラミング言語や処理系、アプリケーション（データベースなど）によって、起点とする時刻は異なります。<br/>
なぜイギリスなのかは後述します。</aside><p>次のJavaScriptを実行してみましょう。<br/>
見た目上は違う時刻なのに、同じ数値（1546300800000）が出力されるのが分かります。これが「時間が同じ」ということです。</p>
	
	
	<pre>var t0 = "2019-01-01T00:00:00+00:00";
var t1 = "2019-01-01T09:00:00+09:00";

console.log("London: " + t0 + " =&gt; " + (new Date(t0)).getTime());
console.log("Tokyo: " + t1 + " =&gt; " + (new Date(t1)).getTime());

// 以下が出力される
// London: 2019-01-01T00:00:00+00:00 =&gt; 1546300800000
// Tokyo: 2019-01-01T09:00:00+09:00 =&gt; 1546300800000</pre>
	
	
	
	
	<h2>タイムゾーン</h2>
	<p>さて、「同じ時間」ではあっても、場所によっては朝だったり夜だったりします。<br/>
地球の自転により、太陽光が当たる範囲がスイカの縦じまのように移動していくので、同じ生活上の時刻を体験しているスイカの縦じま状の地域をグループにしたのがタイムゾーン（timezone）です。</p>
	
	
	<figure>
		<img src="images/IuFZB2Y5QT.png"/>
		<figcaption><a href="https://commons.wikimedia.org/wiki/File:Standard_World_Time_Zones.png" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Standard_World_Time_Zones.png</a><br/>
太陽の照射範囲は右から左へ動きます。</figcaption></figure>
	
	<p>イギリスに朝日が当たったとき、東側の日本はすでに9時間前に夜が明けており、もう夕方近くです。逆に西側のアメリカはまだ夜明けまで6時間以上あり真夜中です。<br/>
つまり、日本は生活上の時刻が9時間進んだゾーン、アメリカは6時間遅れているゾーンということになります。<br/>
各国に時刻は、このタイムゾーンを基準にして制定しています。</p>
	
	
	<h2>オフセット</h2>
	
	
	<p>タイムゾーンは、基準となるゾーンからのプラスやマイナスの時差で表現します。<br/>
この時差をオフセット（Offset）と呼びます。</p>
	<p>歴史的な経緯から、イギリスが含まれるゾーンを時差0時間（UTC）としており、そこから東側と西側に分けて考えます。<br/>
東側はすでに太陽が当たって生活や活動が始まっているので時刻や時差はプラス、西側はまだ太陽が当たっておらず活動が始まっていないので時刻や時差はマイナスになります。</p>
	<p>イギリスでの 2019/01/01 の深夜0時が、各地でどう表現されるか見てみましょう。</p>
	
	
	
	
	
	
	
	
	<figure>
		<figcaption>オフセットの例</figcaption><table><thead><tr><th>場所</th><th>現地時刻</th><th>数値（JavaScript）</th></tr></thead><tbody><tr><td label="場所">日本</td><td label="現地時刻">2019-01-01T09:00:00+09:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">インド</td><td label="現地時刻">2019-01-01T05:30:00+05:30</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">ケニア</td><td label="現地時刻">2019-01-01T03:00:00+03:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">イギリス</td><td label="現地時刻">2019-01-01T00:00:00+00:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">ブラジル</td><td label="現地時刻">2018-12-31T21:00:00-03:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">アメリカ合衆国（ニューヨーク）</td><td label="現地時刻">2018-12-31T19:00:00-05:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">アメリカ合衆国（サンフランシスコ）</td><td label="現地時刻">2018-12-31T16:00:00-08:00</td><td label="数値（JavaScript）">1546300800000</td></tr><tr><td label="場所">アメリカ合衆国（ハワイ）</td><td label="現地時刻">2018-12-31T14:00:00-10:00</td><td label="数値（JavaScript）">1546300800000</td></tr></tbody></table></figure>
<p>表にある、2019-01-01T09:00:00+09:00 は、「9時間進んだタイムゾーン（オフセット+9時間）上での2019年1月1日午前9時」を表します。<br/>
2018-12-31T14:00:00-10:00 は、「10時間遅れたタイムゾーン（オフセット-10時間）上での2018年12月31日午後14時」を表します。<br/>
いずれもISO8601という表記の仕方です。</p><p>始めに書いたように「数値」はすべて同じです。すべて「同じ時間」だからです。<br/>
各国の現地時刻は、あくまでも「生活上の時刻」としての、表記の違いでしかないことが分かります。</p>
	<p>データとしては、実際には通常は「数値」の方が保存されており、画面にはユーザーに合わせて時差を含めた時刻で表示をしているだけなのです。<br/>
したがって、正しい日時データを保存するためには、どこの時刻として入力・出力するようになっているかをよく確認し、処理方法を統一しておかなければなりません。</p>
	<h2>日時データの形式について</h2>
	<p>日時データは、数値として保存する場合と、文字列として保存する場合があります。<br/>
多くのプログラミング環境では、日時型クラスが用意されており、通常は数値で保存されますが、表現できる範囲に制限があります。<br/>
より広範囲な日時を表現したい場合は、文字列として保存しておくと便利です。<br/>
日時を文字列として保存する場合は、 <a href="https://ja.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener">ISO8601</a> という標準規格に従うのが望ましいです。</p>
	<aside>文字列としての日時を使用するときは、自分で専用のクラスや関数を実装しなければいけない場合もあります。たとえば、SFや恐竜の年代記を作成したい場合など…</aside>
	
</article>
